apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-allopen'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.testing.OpenClass'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.deleven.imagesearchtask"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        test.resources.srcDirs += "src/test/resources"
    }
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$supportSdkVersion"
    implementation "com.android.support:design:$supportSdkVersion"
    implementation "com.android.support:cardview-v7:$supportSdkVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    //testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:3.8.1"

    //testImplementation "org.mockito:mockito-all:$rootProject.ext.mockito_all"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"

    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    //testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    //testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //androidTestImplementation 'com.android.support.test:runner:1.0.2'
    //androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //dagger
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"

    testImplementation "com.google.dagger:dagger:$daggerVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    androidTestImplementation "com.google.dagger:dagger:$daggerVersion"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation "com.squareup.retrofit2:retrofit-mock:${retrofitVersion}"

    //Rx
    implementation "io.reactivex.rxjava2:rxandroid:${rxJavaVersion}"

    //Picasso
    implementation "com.squareup.picasso:picasso:${picassoVersion}"
    implementation 'com.android.support:support-v4:27.1.1'
}
